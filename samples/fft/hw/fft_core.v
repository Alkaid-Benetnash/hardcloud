/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 2 cycles
//   Latency: 103 cycles

//   Resources required:
//     20 multipliers (32 x 32 bit)
//     76 adders (32 x 32 bit)

// Generated on Fri Nov 24 08:26:44 EST 2017

// Latency: 103 clock cycles
// Throughput: 1 transform every 2 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 2 cycles.  This means that
// 2 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 103 cycles.  This means that
// the 'next_out' will be asserted 103 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.

// Latency: 103
// Gap: 2
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire [31:0] t0_4;
   wire [31:0] t0_5;
   wire [31:0] t0_6;
   wire [31:0] t0_7;
   wire [31:0] t0_8;
   wire [31:0] t0_9;
   wire [31:0] t0_10;
   wire [31:0] t0_11;
   wire [31:0] t0_12;
   wire [31:0] t0_13;
   wire [31:0] t0_14;
   wire [31:0] t0_15;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire [31:0] t1_4;
   wire [31:0] t1_5;
   wire [31:0] t1_6;
   wire [31:0] t1_7;
   wire [31:0] t1_8;
   wire [31:0] t1_9;
   wire [31:0] t1_10;
   wire [31:0] t1_11;
   wire [31:0] t1_12;
   wire [31:0] t1_13;
   wire [31:0] t1_14;
   wire [31:0] t1_15;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire [31:0] t2_4;
   wire [31:0] t2_5;
   wire [31:0] t2_6;
   wire [31:0] t2_7;
   wire [31:0] t2_8;
   wire [31:0] t2_9;
   wire [31:0] t2_10;
   wire [31:0] t2_11;
   wire [31:0] t2_12;
   wire [31:0] t2_13;
   wire [31:0] t2_14;
   wire [31:0] t2_15;
   wire next_2;
   wire [31:0] t3_0;
   wire [31:0] t3_1;
   wire [31:0] t3_2;
   wire [31:0] t3_3;
   wire [31:0] t3_4;
   wire [31:0] t3_5;
   wire [31:0] t3_6;
   wire [31:0] t3_7;
   wire [31:0] t3_8;
   wire [31:0] t3_9;
   wire [31:0] t3_10;
   wire [31:0] t3_11;
   wire [31:0] t3_12;
   wire [31:0] t3_13;
   wire [31:0] t3_14;
   wire [31:0] t3_15;
   wire next_3;
   wire [31:0] t4_0;
   wire [31:0] t4_1;
   wire [31:0] t4_2;
   wire [31:0] t4_3;
   wire [31:0] t4_4;
   wire [31:0] t4_5;
   wire [31:0] t4_6;
   wire [31:0] t4_7;
   wire [31:0] t4_8;
   wire [31:0] t4_9;
   wire [31:0] t4_10;
   wire [31:0] t4_11;
   wire [31:0] t4_12;
   wire [31:0] t4_13;
   wire [31:0] t4_14;
   wire [31:0] t4_15;
   wire next_4;
   wire [31:0] t5_0;
   wire [31:0] t5_1;
   wire [31:0] t5_2;
   wire [31:0] t5_3;
   wire [31:0] t5_4;
   wire [31:0] t5_5;
   wire [31:0] t5_6;
   wire [31:0] t5_7;
   wire [31:0] t5_8;
   wire [31:0] t5_9;
   wire [31:0] t5_10;
   wire [31:0] t5_11;
   wire [31:0] t5_12;
   wire [31:0] t5_13;
   wire [31:0] t5_14;
   wire [31:0] t5_15;
   wire next_5;
   wire [31:0] t6_0;
   wire [31:0] t6_1;
   wire [31:0] t6_2;
   wire [31:0] t6_3;
   wire [31:0] t6_4;
   wire [31:0] t6_5;
   wire [31:0] t6_6;
   wire [31:0] t6_7;
   wire [31:0] t6_8;
   wire [31:0] t6_9;
   wire [31:0] t6_10;
   wire [31:0] t6_11;
   wire [31:0] t6_12;
   wire [31:0] t6_13;
   wire [31:0] t6_14;
   wire [31:0] t6_15;
   wire next_6;
   wire [31:0] t7_0;
   wire [31:0] t7_1;
   wire [31:0] t7_2;
   wire [31:0] t7_3;
   wire [31:0] t7_4;
   wire [31:0] t7_5;
   wire [31:0] t7_6;
   wire [31:0] t7_7;
   wire [31:0] t7_8;
   wire [31:0] t7_9;
   wire [31:0] t7_10;
   wire [31:0] t7_11;
   wire [31:0] t7_12;
   wire [31:0] t7_13;
   wire [31:0] t7_14;
   wire [31:0] t7_15;
   wire next_7;
   wire [31:0] t8_0;
   wire [31:0] t8_1;
   wire [31:0] t8_2;
   wire [31:0] t8_3;
   wire [31:0] t8_4;
   wire [31:0] t8_5;
   wire [31:0] t8_6;
   wire [31:0] t8_7;
   wire [31:0] t8_8;
   wire [31:0] t8_9;
   wire [31:0] t8_10;
   wire [31:0] t8_11;
   wire [31:0] t8_12;
   wire [31:0] t8_13;
   wire [31:0] t8_14;
   wire [31:0] t8_15;
   wire next_8;
   assign t0_0 = X0;
   assign Y0 = t8_0;
   assign t0_1 = X1;
   assign Y1 = t8_1;
   assign t0_2 = X2;
   assign Y2 = t8_2;
   assign t0_3 = X3;
   assign Y3 = t8_3;
   assign t0_4 = X4;
   assign Y4 = t8_4;
   assign t0_5 = X5;
   assign Y5 = t8_5;
   assign t0_6 = X6;
   assign Y6 = t8_6;
   assign t0_7 = X7;
   assign Y7 = t8_7;
   assign t0_8 = X8;
   assign Y8 = t8_8;
   assign t0_9 = X9;
   assign Y9 = t8_9;
   assign t0_10 = X10;
   assign Y10 = t8_10;
   assign t0_11 = X11;
   assign Y11 = t8_11;
   assign t0_12 = X12;
   assign Y12 = t8_12;
   assign t0_13 = X13;
   assign Y13 = t8_13;
   assign t0_14 = X14;
   assign Y14 = t8_14;
   assign t0_15 = X15;
   assign Y15 = t8_15;
   assign next_0 = next;
   assign next_out = next_8;

// latency=4, gap=2
   rc3762 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=12, gap=2
   codeBlock3764 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=12, gap=2
   codeBlock4071 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15));


// latency=31, gap=2
   codeBlock4378 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15));


// latency=4, gap=2
   rc4727 stage4(.clk(clk), .reset(reset), .next(next_4), .next_out(next_5),
    .X0(t4_0), .Y0(t5_0),
    .X1(t4_1), .Y1(t5_1),
    .X2(t4_2), .Y2(t5_2),
    .X3(t4_3), .Y3(t5_3),
    .X4(t4_4), .Y4(t5_4),
    .X5(t4_5), .Y5(t5_5),
    .X6(t4_6), .Y6(t5_6),
    .X7(t4_7), .Y7(t5_7),
    .X8(t4_8), .Y8(t5_8),
    .X9(t4_9), .Y9(t5_9),
    .X10(t4_10), .Y10(t5_10),
    .X11(t4_11), .Y11(t5_11),
    .X12(t4_12), .Y12(t5_12),
    .X13(t4_13), .Y13(t5_13),
    .X14(t4_14), .Y14(t5_14),
    .X15(t4_15), .Y15(t5_15));


// latency=24, gap=2
   DirSum_5435 stage5(.next(next_5), .clk(clk), .reset(reset), .next_out(next_6),
       .X0(t5_0), .Y0(t6_0),
       .X1(t5_1), .Y1(t6_1),
       .X2(t5_2), .Y2(t6_2),
       .X3(t5_3), .Y3(t6_3),
       .X4(t5_4), .Y4(t6_4),
       .X5(t5_5), .Y5(t6_5),
       .X6(t5_6), .Y6(t6_6),
       .X7(t5_7), .Y7(t6_7),
       .X8(t5_8), .Y8(t6_8),
       .X9(t5_9), .Y9(t6_9),
       .X10(t5_10), .Y10(t6_10),
       .X11(t5_11), .Y11(t6_11),
       .X12(t5_12), .Y12(t6_12),
       .X13(t5_13), .Y13(t6_13),
       .X14(t5_14), .Y14(t6_14),
       .X15(t5_15), .Y15(t6_15));


// latency=12, gap=2
   codeBlock5438 stage6(.clk(clk), .reset(reset), .next_in(next_6), .next_out(next_7),
       .X0_in(t6_0), .Y0(t7_0),
       .X1_in(t6_1), .Y1(t7_1),
       .X2_in(t6_2), .Y2(t7_2),
       .X3_in(t6_3), .Y3(t7_3),
       .X4_in(t6_4), .Y4(t7_4),
       .X5_in(t6_5), .Y5(t7_5),
       .X6_in(t6_6), .Y6(t7_6),
       .X7_in(t6_7), .Y7(t7_7),
       .X8_in(t6_8), .Y8(t7_8),
       .X9_in(t6_9), .Y9(t7_9),
       .X10_in(t6_10), .Y10(t7_10),
       .X11_in(t6_11), .Y11(t7_11),
       .X12_in(t6_12), .Y12(t7_12),
       .X13_in(t6_13), .Y13(t7_13),
       .X14_in(t6_14), .Y14(t7_14),
       .X15_in(t6_15), .Y15(t7_15));


// latency=4, gap=2
   rc5747 stage7(.clk(clk), .reset(reset), .next(next_7), .next_out(next_8),
    .X0(t7_0), .Y0(t8_0),
    .X1(t7_1), .Y1(t8_1),
    .X2(t7_2), .Y2(t8_2),
    .X3(t7_3), .Y3(t8_3),
    .X4(t7_4), .Y4(t8_4),
    .X5(t7_5), .Y5(t8_5),
    .X6(t7_6), .Y6(t8_6),
    .X7(t7_7), .Y7(t8_7),
    .X8(t7_8), .Y8(t8_8),
    .X9(t7_9), .Y9(t8_9),
    .X10(t7_10), .Y10(t8_10),
    .X11(t7_11), .Y11(t8_11),
    .X12(t7_12), .Y12(t8_12),
    .X13(t7_13), .Y13(t8_13),
    .X14(t7_14), .Y14(t8_14),
    .X15(t7_15), .Y15(t8_15));


endmodule

// Latency: 4
// Gap: 2
module rc3762(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   wire [63:0] t2;
   wire [63:0] s2;
   assign t2 = {X4, X5};
   wire [63:0] t3;
   wire [63:0] s3;
   assign t3 = {X6, X7};
   wire [63:0] t4;
   wire [63:0] s4;
   assign t4 = {X8, X9};
   wire [63:0] t5;
   wire [63:0] s5;
   assign t5 = {X10, X11};
   wire [63:0] t6;
   wire [63:0] s6;
   assign t6 = {X12, X13};
   wire [63:0] t7;
   wire [63:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];
   assign Y4 = s2[63:32];
   assign Y5 = s2[31:0];
   assign Y6 = s3[63:32];
   assign Y7 = s3[31:0];
   assign Y8 = s4[63:32];
   assign Y9 = s4[31:0];
   assign Y10 = s5[63:32];
   assign Y11 = s5[31:0];
   assign Y12 = s6[63:32];
   assign Y13 = s6[31:0];
   assign Y14 = s7[63:32];
   assign Y15 = s7[31:0];

   perm3760 instPerm8147(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm3760(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[2];
   assign inBank0[2] = addr0[1];
   assign inAddr0[0] = addr0[0];
   assign outBank0[0] = addr0b[3] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[3] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[2];
   assign inBank1[2] = addr1[1];
   assign inAddr1[0] = addr1[0];
   assign outBank1[0] = addr1b[3] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[3] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[2];
   assign inBank2[2] = addr2[1];
   assign inAddr2[0] = addr2[0];
   assign outBank2[0] = addr2b[3] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[3] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[2];
   assign inBank3[2] = addr3[1];
   assign inAddr3[0] = addr3[0];
   assign outBank3[0] = addr3b[3] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[3] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[2];
   assign inBank4[2] = addr4[1];
   assign inAddr4[0] = addr4[0];
   assign outBank4[0] = addr4b[3] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[3] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[2];
   assign inBank5[2] = addr5[1];
   assign inAddr5[0] = addr5[0];
   assign outBank5[0] = addr5b[3] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[3] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[2];
   assign inBank6[2] = addr6[1];
   assign inAddr6[0] = addr6[0];
   assign outBank6[0] = addr6b[3] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[3] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[2];
   assign inBank7[2] = addr7[1];
   assign inAddr7[0] = addr7[0];
   assign outBank7[0] = addr7b[3] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[3] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_8150(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_8153(.X(next0), .Y(next_out), .clk(clk));


   memArray16_3760 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_5 = {x3, inAddr3};
    assign w_0_2 = {x4, inAddr4};
    assign w_0_3 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_3760(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_8156(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

// Latency: 12
// Gap: 1
module codeBlock3764(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(11, 1) shiftFIFO_8159(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a410;
   wire signed [31:0] a411;
   wire signed [31:0] a412;
   wire signed [31:0] a413;
   wire signed [31:0] a418;
   wire signed [31:0] a419;
   wire signed [31:0] a420;
   wire signed [31:0] a421;
   wire signed [31:0] a426;
   wire signed [31:0] a427;
   wire signed [31:0] a428;
   wire signed [31:0] a429;
   wire signed [31:0] a434;
   wire signed [31:0] a435;
   wire signed [31:0] a436;
   wire signed [31:0] a437;
   wire  [31:0] t442;
   wire  [31:0] t443;
   wire  [31:0] t444;
   wire  [31:0] t445;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire  [31:0] t446;
   wire  [31:0] t447;
   wire  [31:0] t448;
   wire  [31:0] t449;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire  [31:0] t450;
   wire  [31:0] t451;
   wire  [31:0] t452;
   wire  [31:0] t453;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t454;
   wire  [31:0] t455;
   wire  [31:0] t456;
   wire  [31:0] t457;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;


   assign a410 = X0;
   assign a411 = X2;
   assign a412 = X1;
   assign a413 = X3;
   assign a418 = X4;
   assign a419 = X6;
   assign a420 = X5;
   assign a421 = X7;
   assign a426 = X8;
   assign a427 = X10;
   assign a428 = X9;
   assign a429 = X11;
   assign a434 = X12;
   assign a435 = X14;
   assign a436 = X13;
   assign a437 = X15;
   assign Y0 = t442;
   assign Y1 = t443;
   assign Y2 = t444;
   assign Y3 = t445;
   assign Y4 = t446;
   assign Y5 = t447;
   assign Y6 = t448;
   assign Y7 = t449;
   assign Y8 = t450;
   assign Y9 = t451;
   assign Y10 = t452;
   assign Y11 = t453;
   assign Y12 = t454;
   assign Y13 = t455;
   assign Y14 = t456;
   assign Y15 = t457;

    addfp32 add3776(.a(a410), .b(a411), .clk(clk), .out(t442), .enable(1'b1), .rst(reset));
    addfp32 add3791(.a(a412), .b(a413), .clk(clk), .out(t443), .enable(1'b1), .rst(reset));
    subfp32 sub3806(.a(a410), .b(a411), .clk(clk), .out(t444), .enable(1'b1), .rst(reset));
    subfp32 sub3821(.a(a412), .b(a413), .clk(clk), .out(t445), .enable(1'b1), .rst(reset));
    addfp32 add3852(.a(a418), .b(a419), .clk(clk), .out(t446), .enable(1'b1), .rst(reset));
    addfp32 add3867(.a(a420), .b(a421), .clk(clk), .out(t447), .enable(1'b1), .rst(reset));
    subfp32 sub3882(.a(a418), .b(a419), .clk(clk), .out(t448), .enable(1'b1), .rst(reset));
    subfp32 sub3897(.a(a420), .b(a421), .clk(clk), .out(t449), .enable(1'b1), .rst(reset));
    addfp32 add3928(.a(a426), .b(a427), .clk(clk), .out(t450), .enable(1'b1), .rst(reset));
    addfp32 add3943(.a(a428), .b(a429), .clk(clk), .out(t451), .enable(1'b1), .rst(reset));
    subfp32 sub3958(.a(a426), .b(a427), .clk(clk), .out(t452), .enable(1'b1), .rst(reset));
    subfp32 sub3973(.a(a428), .b(a429), .clk(clk), .out(t453), .enable(1'b1), .rst(reset));
    addfp32 add4004(.a(a434), .b(a435), .clk(clk), .out(t454), .enable(1'b1), .rst(reset));
    addfp32 add4019(.a(a436), .b(a437), .clk(clk), .out(t455), .enable(1'b1), .rst(reset));
    subfp32 sub4034(.a(a434), .b(a435), .clk(clk), .out(t456), .enable(1'b1), .rst(reset));
    subfp32 sub4049(.a(a436), .b(a437), .clk(clk), .out(t457), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock4071(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(11, 1) shiftFIFO_8162(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a345;
   wire signed [31:0] a346;
   wire signed [31:0] a347;
   wire signed [31:0] a348;
   wire signed [31:0] a353;
   wire signed [31:0] a354;
   wire signed [31:0] a355;
   wire signed [31:0] a356;
   wire signed [31:0] a361;
   wire signed [31:0] a362;
   wire signed [31:0] a363;
   wire signed [31:0] a364;
   wire signed [31:0] a369;
   wire signed [31:0] a370;
   wire signed [31:0] a371;
   wire signed [31:0] a372;
   wire  [31:0] t337;
   wire  [31:0] t338;
   wire  [31:0] t339;
   wire  [31:0] t340;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire  [31:0] t341;
   wire  [31:0] t342;
   wire  [31:0] t343;
   wire  [31:0] t344;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire  [31:0] t345;
   wire  [31:0] t346;
   wire  [31:0] t347;
   wire  [31:0] t348;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t349;
   wire  [31:0] t350;
   wire  [31:0] t351;
   wire  [31:0] t352;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;


   assign a345 = X0;
   assign a346 = X4;
   assign a347 = X1;
   assign a348 = X5;
   assign a353 = X2;
   assign a354 = X7;
   assign a355 = X3;
   assign a356 = X6;
   assign a361 = X8;
   assign a362 = X12;
   assign a363 = X9;
   assign a364 = X13;
   assign a369 = X10;
   assign a370 = X15;
   assign a371 = X11;
   assign a372 = X14;
   assign Y0 = t337;
   assign Y1 = t338;
   assign Y2 = t339;
   assign Y3 = t340;
   assign Y4 = t341;
   assign Y5 = t342;
   assign Y6 = t343;
   assign Y7 = t344;
   assign Y8 = t345;
   assign Y9 = t346;
   assign Y10 = t347;
   assign Y11 = t348;
   assign Y12 = t349;
   assign Y13 = t350;
   assign Y14 = t351;
   assign Y15 = t352;

    addfp32 add4083(.a(a345), .b(a346), .clk(clk), .out(t337), .enable(1'b1), .rst(reset));
    addfp32 add4098(.a(a347), .b(a348), .clk(clk), .out(t338), .enable(1'b1), .rst(reset));
    subfp32 sub4113(.a(a345), .b(a346), .clk(clk), .out(t339), .enable(1'b1), .rst(reset));
    subfp32 sub4128(.a(a347), .b(a348), .clk(clk), .out(t340), .enable(1'b1), .rst(reset));
    addfp32 add4159(.a(a353), .b(a354), .clk(clk), .out(t341), .enable(1'b1), .rst(reset));
    subfp32 sub4174(.a(a355), .b(a356), .clk(clk), .out(t342), .enable(1'b1), .rst(reset));
    subfp32 sub4189(.a(a353), .b(a354), .clk(clk), .out(t343), .enable(1'b1), .rst(reset));
    addfp32 add4204(.a(a355), .b(a356), .clk(clk), .out(t344), .enable(1'b1), .rst(reset));
    addfp32 add4235(.a(a361), .b(a362), .clk(clk), .out(t345), .enable(1'b1), .rst(reset));
    addfp32 add4250(.a(a363), .b(a364), .clk(clk), .out(t346), .enable(1'b1), .rst(reset));
    subfp32 sub4265(.a(a361), .b(a362), .clk(clk), .out(t347), .enable(1'b1), .rst(reset));
    subfp32 sub4280(.a(a363), .b(a364), .clk(clk), .out(t348), .enable(1'b1), .rst(reset));
    addfp32 add4311(.a(a369), .b(a370), .clk(clk), .out(t349), .enable(1'b1), .rst(reset));
    subfp32 sub4326(.a(a371), .b(a372), .clk(clk), .out(t350), .enable(1'b1), .rst(reset));
    subfp32 sub4341(.a(a369), .b(a370), .clk(clk), .out(t351), .enable(1'b1), .rst(reset));
    addfp32 add4356(.a(a371), .b(a372), .clk(clk), .out(t352), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 31
// Gap: 1
module codeBlock4378(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(30, 1) shiftFIFO_8165(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a285;
   wire signed [31:0] a286;
   wire signed [31:0] a287;
   wire signed [31:0] a288;
   wire signed [31:0] a293;
   wire signed [31:0] a294;
   wire signed [31:0] a295;
   wire signed [31:0] a296;
   wire signed [31:0] a299;
   wire signed [31:0] a300;
   wire signed [31:0] a301;
   wire signed [31:0] a302;
   wire signed [31:0] a307;
   wire signed [31:0] a308;
   wire signed [31:0] a309;
   wire signed [31:0] a310;
   reg signed [31:0] tm113;
   reg signed [31:0] tm132;
   reg signed [31:0] tm189;
   reg signed [31:0] tm208;
   reg signed [31:0] tm114;
   reg signed [31:0] tm133;
   reg signed [31:0] tm190;
   reg signed [31:0] tm209;
   reg signed [31:0] tm115;
   reg signed [31:0] tm134;
   reg signed [31:0] tm191;
   reg signed [31:0] tm210;
   reg signed [31:0] tm116;
   reg signed [31:0] tm135;
   reg signed [31:0] tm192;
   reg signed [31:0] tm211;
   reg signed [31:0] tm117;
   reg signed [31:0] tm136;
   reg signed [31:0] tm193;
   reg signed [31:0] tm212;
   reg signed [31:0] tm118;
   reg signed [31:0] tm137;
   reg signed [31:0] tm194;
   reg signed [31:0] tm213;
   reg signed [31:0] tm119;
   reg signed [31:0] tm138;
   reg signed [31:0] tm195;
   reg signed [31:0] tm214;
   wire  [31:0] a281;
   wire  [31:0] a282;
   wire  [31:0] a283;
   wire  [31:0] a284;
   reg signed [31:0] tm120;
   reg signed [31:0] tm139;
   reg signed [31:0] tm196;
   reg signed [31:0] tm215;
   reg signed [31:0] tm121;
   reg signed [31:0] tm140;
   reg signed [31:0] tm197;
   reg signed [31:0] tm216;
   reg signed [31:0] tm122;
   reg signed [31:0] tm141;
   reg signed [31:0] tm198;
   reg signed [31:0] tm217;
   wire  [31:0] t213;
   wire  [31:0] t214;
   wire  [31:0] t215;
   wire  [31:0] t216;
   wire  [31:0] t223;
   wire  [31:0] t224;
   wire  [31:0] t225;
   wire  [31:0] t226;
   reg signed [31:0] tm123;
   reg signed [31:0] tm142;
   reg signed [31:0] tm199;
   reg signed [31:0] tm218;
   reg signed [31:0] tm124;
   reg signed [31:0] tm143;
   reg signed [31:0] tm200;
   reg signed [31:0] tm219;
   reg signed [31:0] tm265;
   reg signed [31:0] tm284;
   reg signed [31:0] tm303;
   reg signed [31:0] tm322;
   reg signed [31:0] tm341;
   reg signed [31:0] tm360;
   reg signed [31:0] tm379;
   reg signed [31:0] tm398;
   reg signed [31:0] tm125;
   reg signed [31:0] tm144;
   reg signed [31:0] tm201;
   reg signed [31:0] tm220;
   reg signed [31:0] tm266;
   reg signed [31:0] tm285;
   reg signed [31:0] tm304;
   reg signed [31:0] tm323;
   reg signed [31:0] tm342;
   reg signed [31:0] tm361;
   reg signed [31:0] tm380;
   reg signed [31:0] tm399;
   reg signed [31:0] tm126;
   reg signed [31:0] tm145;
   reg signed [31:0] tm202;
   reg signed [31:0] tm221;
   reg signed [31:0] tm267;
   reg signed [31:0] tm286;
   reg signed [31:0] tm305;
   reg signed [31:0] tm324;
   reg signed [31:0] tm343;
   reg signed [31:0] tm362;
   reg signed [31:0] tm381;
   reg signed [31:0] tm400;
   reg signed [31:0] tm127;
   reg signed [31:0] tm146;
   reg signed [31:0] tm203;
   reg signed [31:0] tm222;
   reg signed [31:0] tm268;
   reg signed [31:0] tm287;
   reg signed [31:0] tm306;
   reg signed [31:0] tm325;
   reg signed [31:0] tm344;
   reg signed [31:0] tm363;
   reg signed [31:0] tm382;
   reg signed [31:0] tm401;
   reg signed [31:0] tm128;
   reg signed [31:0] tm147;
   reg signed [31:0] tm204;
   reg signed [31:0] tm223;
   reg signed [31:0] tm269;
   reg signed [31:0] tm288;
   reg signed [31:0] tm307;
   reg signed [31:0] tm326;
   reg signed [31:0] tm345;
   reg signed [31:0] tm364;
   reg signed [31:0] tm383;
   reg signed [31:0] tm402;
   reg signed [31:0] tm129;
   reg signed [31:0] tm148;
   reg signed [31:0] tm205;
   reg signed [31:0] tm224;
   reg signed [31:0] tm270;
   reg signed [31:0] tm289;
   reg signed [31:0] tm308;
   reg signed [31:0] tm327;
   reg signed [31:0] tm346;
   reg signed [31:0] tm365;
   reg signed [31:0] tm384;
   reg signed [31:0] tm403;
   reg signed [31:0] tm130;
   reg signed [31:0] tm149;
   reg signed [31:0] tm206;
   reg signed [31:0] tm225;
   reg signed [31:0] tm271;
   reg signed [31:0] tm290;
   reg signed [31:0] tm309;
   reg signed [31:0] tm328;
   reg signed [31:0] tm347;
   reg signed [31:0] tm366;
   reg signed [31:0] tm385;
   reg signed [31:0] tm404;
   wire  [31:0] t217;
   wire  [31:0] t218;
   wire  [31:0] t227;
   wire  [31:0] t228;
   reg signed [31:0] tm131;
   reg signed [31:0] tm150;
   reg signed [31:0] tm207;
   reg signed [31:0] tm226;
   reg signed [31:0] tm272;
   reg signed [31:0] tm291;
   reg signed [31:0] tm310;
   reg signed [31:0] tm329;
   reg signed [31:0] tm348;
   reg signed [31:0] tm367;
   reg signed [31:0] tm386;
   reg signed [31:0] tm405;
   reg signed [31:0] tm273;
   reg signed [31:0] tm292;
   reg signed [31:0] tm311;
   reg signed [31:0] tm330;
   reg signed [31:0] tm349;
   reg signed [31:0] tm368;
   reg signed [31:0] tm387;
   reg signed [31:0] tm406;
   reg signed [31:0] tm274;
   reg signed [31:0] tm293;
   reg signed [31:0] tm312;
   reg signed [31:0] tm331;
   reg signed [31:0] tm350;
   reg signed [31:0] tm369;
   reg signed [31:0] tm388;
   reg signed [31:0] tm407;
   reg signed [31:0] tm275;
   reg signed [31:0] tm294;
   reg signed [31:0] tm313;
   reg signed [31:0] tm332;
   reg signed [31:0] tm351;
   reg signed [31:0] tm370;
   reg signed [31:0] tm389;
   reg signed [31:0] tm408;
   reg signed [31:0] tm276;
   reg signed [31:0] tm295;
   reg signed [31:0] tm314;
   reg signed [31:0] tm333;
   reg signed [31:0] tm352;
   reg signed [31:0] tm371;
   reg signed [31:0] tm390;
   reg signed [31:0] tm409;
   reg signed [31:0] tm277;
   reg signed [31:0] tm296;
   reg signed [31:0] tm315;
   reg signed [31:0] tm334;
   reg signed [31:0] tm353;
   reg signed [31:0] tm372;
   reg signed [31:0] tm391;
   reg signed [31:0] tm410;
   reg signed [31:0] tm278;
   reg signed [31:0] tm297;
   reg signed [31:0] tm316;
   reg signed [31:0] tm335;
   reg signed [31:0] tm354;
   reg signed [31:0] tm373;
   reg signed [31:0] tm392;
   reg signed [31:0] tm411;
   reg signed [31:0] tm279;
   reg signed [31:0] tm298;
   reg signed [31:0] tm317;
   reg signed [31:0] tm336;
   reg signed [31:0] tm355;
   reg signed [31:0] tm374;
   reg signed [31:0] tm393;
   reg signed [31:0] tm412;
   reg signed [31:0] tm280;
   reg signed [31:0] tm299;
   reg signed [31:0] tm318;
   reg signed [31:0] tm337;
   reg signed [31:0] tm356;
   reg signed [31:0] tm375;
   reg signed [31:0] tm394;
   reg signed [31:0] tm413;
   reg signed [31:0] tm281;
   reg signed [31:0] tm300;
   reg signed [31:0] tm319;
   reg signed [31:0] tm338;
   reg signed [31:0] tm357;
   reg signed [31:0] tm376;
   reg signed [31:0] tm395;
   reg signed [31:0] tm414;
   reg signed [31:0] tm282;
   reg signed [31:0] tm301;
   reg signed [31:0] tm320;
   reg signed [31:0] tm339;
   reg signed [31:0] tm358;
   reg signed [31:0] tm377;
   reg signed [31:0] tm396;
   reg signed [31:0] tm415;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire  [31:0] t219;
   wire  [31:0] t220;
   wire  [31:0] t221;
   wire  [31:0] t222;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t229;
   wire  [31:0] t230;
   wire  [31:0] t231;
   wire  [31:0] t232;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;
   reg signed [31:0] tm283;
   reg signed [31:0] tm302;
   reg signed [31:0] tm321;
   reg signed [31:0] tm340;
   reg signed [31:0] tm359;
   reg signed [31:0] tm378;
   reg signed [31:0] tm397;
   reg signed [31:0] tm416;

   wire signed [31:0] tm0;
   assign tm0 = 32'h3f3504f3;

   assign a285 = X0;
   assign a286 = X8;
   assign a287 = X1;
   assign a288 = X9;
   assign a293 = X12;
   assign a294 = X13;
   assign a295 = X4;
   assign a296 = X5;
   assign a299 = X2;
   assign a300 = X11;
   assign a301 = X3;
   assign a302 = X10;
   assign a307 = X15;
   assign a308 = X14;
   assign a309 = X6;
   assign a310 = X7;
   assign Y0 = tm283;
   assign Y1 = tm302;
   assign Y2 = tm321;
   assign Y3 = tm340;
   assign Y4 = t219;
   assign Y5 = t220;
   assign Y6 = t221;
   assign Y7 = t222;
   assign Y8 = tm359;
   assign Y9 = tm378;
   assign Y10 = tm397;
   assign Y11 = tm416;
   assign Y12 = t229;
   assign Y13 = t230;
   assign Y14 = t231;
   assign Y15 = t232;

    multfp32fp32 m4462(.a(tm0), .b(a293), .clk(clk), .out(a281), .enable(1'b1), .rst(reset));
    multfp32fp32 m4473(.a(tm0), .b(a294), .clk(clk), .out(a282), .enable(1'b1), .rst(reset));
    multfp32fp32 m4634(.a(tm0), .b(a307), .clk(clk), .out(a283), .enable(1'b1), .rst(reset));
    multfp32fp32 m4645(.a(tm0), .b(a308), .clk(clk), .out(a284), .enable(1'b1), .rst(reset));
    addfp32 add4390(.a(a285), .b(a286), .clk(clk), .out(t213), .enable(1'b1), .rst(reset));
    addfp32 add4405(.a(a287), .b(a288), .clk(clk), .out(t214), .enable(1'b1), .rst(reset));
    subfp32 sub4420(.a(a285), .b(a286), .clk(clk), .out(t215), .enable(1'b1), .rst(reset));
    subfp32 sub4435(.a(a287), .b(a288), .clk(clk), .out(t216), .enable(1'b1), .rst(reset));
    addfp32 add4562(.a(a299), .b(a300), .clk(clk), .out(t223), .enable(1'b1), .rst(reset));
    subfp32 sub4577(.a(a301), .b(a302), .clk(clk), .out(t224), .enable(1'b1), .rst(reset));
    subfp32 sub4592(.a(a299), .b(a300), .clk(clk), .out(t225), .enable(1'b1), .rst(reset));
    addfp32 add4607(.a(a301), .b(a302), .clk(clk), .out(t226), .enable(1'b1), .rst(reset));
    addfp32 add4480(.a(a281), .b(a282), .clk(clk), .out(t217), .enable(1'b1), .rst(reset));
    subfp32 sub4487(.a(a282), .b(a281), .clk(clk), .out(t218), .enable(1'b1), .rst(reset));
    subfp32 sub4652(.a(a283), .b(a284), .clk(clk), .out(t227), .enable(1'b1), .rst(reset));
    addfp32 add4659(.a(a284), .b(a283), .clk(clk), .out(t228), .enable(1'b1), .rst(reset));
    addfp32 add4498(.a(tm131), .b(t217), .clk(clk), .out(t219), .enable(1'b1), .rst(reset));
    addfp32 add4509(.a(tm150), .b(t218), .clk(clk), .out(t220), .enable(1'b1), .rst(reset));
    subfp32 sub4520(.a(tm131), .b(t217), .clk(clk), .out(t221), .enable(1'b1), .rst(reset));
    subfp32 sub4531(.a(tm150), .b(t218), .clk(clk), .out(t222), .enable(1'b1), .rst(reset));
    addfp32 add4670(.a(tm207), .b(t227), .clk(clk), .out(t229), .enable(1'b1), .rst(reset));
    subfp32 sub4681(.a(tm226), .b(t228), .clk(clk), .out(t230), .enable(1'b1), .rst(reset));
    subfp32 sub4692(.a(tm207), .b(t227), .clk(clk), .out(t231), .enable(1'b1), .rst(reset));
    addfp32 add4703(.a(tm226), .b(t228), .clk(clk), .out(t232), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm113 <= a295;
         tm132 <= a296;
         tm189 <= a309;
         tm208 <= a310;
         tm114 <= tm113;
         tm133 <= tm132;
         tm190 <= tm189;
         tm209 <= tm208;
         tm115 <= tm114;
         tm134 <= tm133;
         tm191 <= tm190;
         tm210 <= tm209;
         tm116 <= tm115;
         tm135 <= tm134;
         tm192 <= tm191;
         tm211 <= tm210;
         tm117 <= tm116;
         tm136 <= tm135;
         tm193 <= tm192;
         tm212 <= tm211;
         tm118 <= tm117;
         tm137 <= tm136;
         tm194 <= tm193;
         tm213 <= tm212;
         tm119 <= tm118;
         tm138 <= tm137;
         tm195 <= tm194;
         tm214 <= tm213;
         tm120 <= tm119;
         tm139 <= tm138;
         tm196 <= tm195;
         tm215 <= tm214;
         tm121 <= tm120;
         tm140 <= tm139;
         tm197 <= tm196;
         tm216 <= tm215;
         tm122 <= tm121;
         tm141 <= tm140;
         tm198 <= tm197;
         tm217 <= tm216;
         tm123 <= tm122;
         tm142 <= tm141;
         tm199 <= tm198;
         tm218 <= tm217;
         tm124 <= tm123;
         tm143 <= tm142;
         tm200 <= tm199;
         tm219 <= tm218;
         tm265 <= t213;
         tm284 <= t214;
         tm303 <= t215;
         tm322 <= t216;
         tm341 <= t223;
         tm360 <= t224;
         tm379 <= t225;
         tm398 <= t226;
         tm125 <= tm124;
         tm144 <= tm143;
         tm201 <= tm200;
         tm220 <= tm219;
         tm266 <= tm265;
         tm285 <= tm284;
         tm304 <= tm303;
         tm323 <= tm322;
         tm342 <= tm341;
         tm361 <= tm360;
         tm380 <= tm379;
         tm399 <= tm398;
         tm126 <= tm125;
         tm145 <= tm144;
         tm202 <= tm201;
         tm221 <= tm220;
         tm267 <= tm266;
         tm286 <= tm285;
         tm305 <= tm304;
         tm324 <= tm323;
         tm343 <= tm342;
         tm362 <= tm361;
         tm381 <= tm380;
         tm400 <= tm399;
         tm127 <= tm126;
         tm146 <= tm145;
         tm203 <= tm202;
         tm222 <= tm221;
         tm268 <= tm267;
         tm287 <= tm286;
         tm306 <= tm305;
         tm325 <= tm324;
         tm344 <= tm343;
         tm363 <= tm362;
         tm382 <= tm381;
         tm401 <= tm400;
         tm128 <= tm127;
         tm147 <= tm146;
         tm204 <= tm203;
         tm223 <= tm222;
         tm269 <= tm268;
         tm288 <= tm287;
         tm307 <= tm306;
         tm326 <= tm325;
         tm345 <= tm344;
         tm364 <= tm363;
         tm383 <= tm382;
         tm402 <= tm401;
         tm129 <= tm128;
         tm148 <= tm147;
         tm205 <= tm204;
         tm224 <= tm223;
         tm270 <= tm269;
         tm289 <= tm288;
         tm308 <= tm307;
         tm327 <= tm326;
         tm346 <= tm345;
         tm365 <= tm364;
         tm384 <= tm383;
         tm403 <= tm402;
         tm130 <= tm129;
         tm149 <= tm148;
         tm206 <= tm205;
         tm225 <= tm224;
         tm271 <= tm270;
         tm290 <= tm289;
         tm309 <= tm308;
         tm328 <= tm327;
         tm347 <= tm346;
         tm366 <= tm365;
         tm385 <= tm384;
         tm404 <= tm403;
         tm131 <= tm130;
         tm150 <= tm149;
         tm207 <= tm206;
         tm226 <= tm225;
         tm272 <= tm271;
         tm291 <= tm290;
         tm310 <= tm309;
         tm329 <= tm328;
         tm348 <= tm347;
         tm367 <= tm366;
         tm386 <= tm385;
         tm405 <= tm404;
         tm273 <= tm272;
         tm292 <= tm291;
         tm311 <= tm310;
         tm330 <= tm329;
         tm349 <= tm348;
         tm368 <= tm367;
         tm387 <= tm386;
         tm406 <= tm405;
         tm274 <= tm273;
         tm293 <= tm292;
         tm312 <= tm311;
         tm331 <= tm330;
         tm350 <= tm349;
         tm369 <= tm368;
         tm388 <= tm387;
         tm407 <= tm406;
         tm275 <= tm274;
         tm294 <= tm293;
         tm313 <= tm312;
         tm332 <= tm331;
         tm351 <= tm350;
         tm370 <= tm369;
         tm389 <= tm388;
         tm408 <= tm407;
         tm276 <= tm275;
         tm295 <= tm294;
         tm314 <= tm313;
         tm333 <= tm332;
         tm352 <= tm351;
         tm371 <= tm370;
         tm390 <= tm389;
         tm409 <= tm408;
         tm277 <= tm276;
         tm296 <= tm295;
         tm315 <= tm314;
         tm334 <= tm333;
         tm353 <= tm352;
         tm372 <= tm371;
         tm391 <= tm390;
         tm410 <= tm409;
         tm278 <= tm277;
         tm297 <= tm296;
         tm316 <= tm315;
         tm335 <= tm334;
         tm354 <= tm353;
         tm373 <= tm372;
         tm392 <= tm391;
         tm411 <= tm410;
         tm279 <= tm278;
         tm298 <= tm297;
         tm317 <= tm316;
         tm336 <= tm335;
         tm355 <= tm354;
         tm374 <= tm373;
         tm393 <= tm392;
         tm412 <= tm411;
         tm280 <= tm279;
         tm299 <= tm298;
         tm318 <= tm317;
         tm337 <= tm336;
         tm356 <= tm355;
         tm375 <= tm374;
         tm394 <= tm393;
         tm413 <= tm412;
         tm281 <= tm280;
         tm300 <= tm299;
         tm319 <= tm318;
         tm338 <= tm337;
         tm357 <= tm356;
         tm376 <= tm375;
         tm395 <= tm394;
         tm414 <= tm413;
         tm282 <= tm281;
         tm301 <= tm300;
         tm320 <= tm319;
         tm339 <= tm338;
         tm358 <= tm357;
         tm377 <= tm376;
         tm396 <= tm395;
         tm415 <= tm414;
         tm283 <= tm282;
         tm302 <= tm301;
         tm321 <= tm320;
         tm340 <= tm339;
         tm359 <= tm358;
         tm378 <= tm377;
         tm397 <= tm396;
         tm416 <= tm415;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc4727(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   wire [63:0] t2;
   wire [63:0] s2;
   assign t2 = {X4, X5};
   wire [63:0] t3;
   wire [63:0] s3;
   assign t3 = {X6, X7};
   wire [63:0] t4;
   wire [63:0] s4;
   assign t4 = {X8, X9};
   wire [63:0] t5;
   wire [63:0] s5;
   assign t5 = {X10, X11};
   wire [63:0] t6;
   wire [63:0] s6;
   assign t6 = {X12, X13};
   wire [63:0] t7;
   wire [63:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];
   assign Y4 = s2[63:32];
   assign Y5 = s2[31:0];
   assign Y6 = s3[63:32];
   assign Y7 = s3[31:0];
   assign Y8 = s4[63:32];
   assign Y9 = s4[31:0];
   assign Y10 = s5[63:32];
   assign Y11 = s5[31:0];
   assign Y12 = s6[63:32];
   assign Y13 = s6[31:0];
   assign Y14 = s7[63:32];
   assign Y15 = s7[31:0];

   perm4725 instPerm8166(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm4725(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[1];
   assign inBank0[2] = addr0[2];
   assign inAddr0[0] = addr0[0];
   assign outBank0[0] = addr0b[3] ^ addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[3] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[1];
   assign inBank1[2] = addr1[2];
   assign inAddr1[0] = addr1[0];
   assign outBank1[0] = addr1b[3] ^ addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[3] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[1];
   assign inBank2[2] = addr2[2];
   assign inAddr2[0] = addr2[0];
   assign outBank2[0] = addr2b[3] ^ addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[3] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[1];
   assign inBank3[2] = addr3[2];
   assign inAddr3[0] = addr3[0];
   assign outBank3[0] = addr3b[3] ^ addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[3] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[1];
   assign inBank4[2] = addr4[2];
   assign inAddr4[0] = addr4[0];
   assign outBank4[0] = addr4b[3] ^ addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[3] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[1];
   assign inBank5[2] = addr5[2];
   assign inAddr5[0] = addr5[0];
   assign outBank5[0] = addr5b[3] ^ addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[3] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[1];
   assign inBank6[2] = addr6[2];
   assign inAddr6[0] = addr6[0];
   assign outBank6[0] = addr6b[3] ^ addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[3] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[1];
   assign inBank7[2] = addr7[2];
   assign inAddr7[0] = addr7[0];
   assign outBank7[0] = addr7b[3] ^ addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[3] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_8169(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_8172(.X(next0), .Y(next_out), .clk(clk));


   memArray16_4725 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_4), .x1(w_0_5), .y0(w_1_4), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_6), .x1(w_0_7), .y0(w_1_6), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_2), .x1(z_0_3), .y0(z_1_2), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_4), .x1(z_0_5), .y0(z_1_4), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_6), .x1(z_0_7), .y0(z_1_6), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_2), .x1(u_0_3), .y0(u_1_2), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_4), .x1(u_0_5), .y0(u_1_4), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_6), .x1(u_0_7), .y0(u_1_6), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_4725(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_8175(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 2
module DirSum_5435(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i1;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 1)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock4729 codeBlockIsnt8176(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D2_5377(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_5385(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f6c835e;
      1: out3 <= 32'hbec3ef15;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_5393(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f3504f3;
      1: out3 <= 32'hbf3504f3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_5401(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3ec3ef15;
      1: out3 <= 32'hbf6c835e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D10_5409(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbf800000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12_5417(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'hbec3ef15;
      1: out3 <= 32'hbf6c835e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_5433(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'hbf6c835e;
      1: out3 <= 32'hbec3ef15;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 24
// Gap: 1
module codeBlock4729(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i1_in;
   reg [0:0] i1;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(23, 1) shiftFIFO_8179(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a193;
   reg signed [31:0] tm15;
   reg signed [31:0] tm41;
   wire signed [31:0] a209;
   wire signed [31:0] a162;
   wire signed [31:0] a212;
   wire signed [31:0] a166;
   wire signed [31:0] a213;
   wire signed [31:0] a214;
   wire signed [31:0] a217;
   wire signed [31:0] a174;
   wire signed [31:0] a220;
   wire signed [31:0] a178;
   wire signed [31:0] a221;
   wire signed [31:0] a222;
   wire signed [31:0] a225;
   wire signed [31:0] a186;
   wire signed [31:0] a228;
   wire signed [31:0] a190;
   wire signed [31:0] a229;
   wire signed [31:0] a230;
   wire signed [31:0] a233;
   wire signed [31:0] a198;
   wire signed [31:0] a236;
   wire signed [31:0] a202;
   wire signed [31:0] a237;
   wire signed [31:0] a238;
   reg signed [31:0] tm417;
   reg signed [31:0] tm421;
   reg signed [31:0] tm433;
   reg signed [31:0] tm437;
   reg signed [31:0] tm449;
   reg signed [31:0] tm457;
   reg signed [31:0] tm465;
   reg signed [31:0] tm469;
   reg signed [31:0] tm481;
   reg signed [31:0] tm504;
   reg signed [31:0] tm527;
   reg signed [31:0] tm550;
   reg signed [31:0] tm573;
   reg signed [31:0] tm596;
   reg signed [31:0] tm619;
   reg signed [31:0] tm642;
   reg signed [31:0] tm418;
   reg signed [31:0] tm422;
   reg signed [31:0] tm434;
   reg signed [31:0] tm438;
   reg signed [31:0] tm450;
   reg signed [31:0] tm458;
   reg signed [31:0] tm466;
   reg signed [31:0] tm470;
   reg signed [31:0] tm482;
   reg signed [31:0] tm505;
   reg signed [31:0] tm528;
   reg signed [31:0] tm551;
   reg signed [31:0] tm574;
   reg signed [31:0] tm597;
   reg signed [31:0] tm620;
   reg signed [31:0] tm643;
   wire signed [31:0] tm6;
   wire signed [31:0] a167;
   wire signed [31:0] tm7;
   wire signed [31:0] a169;
   wire signed [31:0] tm10;
   wire signed [31:0] a179;
   wire signed [31:0] tm11;
   wire signed [31:0] a181;
   wire signed [31:0] tm14;
   wire signed [31:0] a191;
   wire signed [31:0] tm18;
   wire signed [31:0] a203;
   wire signed [31:0] tm19;
   wire signed [31:0] a205;
   reg signed [31:0] tm419;
   reg signed [31:0] tm423;
   reg signed [31:0] tm435;
   reg signed [31:0] tm439;
   reg signed [31:0] tm451;
   reg signed [31:0] tm459;
   reg signed [31:0] tm467;
   reg signed [31:0] tm471;
   reg signed [31:0] tm483;
   reg signed [31:0] tm506;
   reg signed [31:0] tm529;
   reg signed [31:0] tm552;
   reg signed [31:0] tm575;
   reg signed [31:0] tm598;
   reg signed [31:0] tm621;
   reg signed [31:0] tm644;
   reg signed [31:0] tm24;
   reg signed [31:0] tm25;
   reg signed [31:0] tm32;
   reg signed [31:0] tm33;
   reg signed [31:0] tm40;
   reg signed [31:0] tm48;
   reg signed [31:0] tm49;
   reg signed [31:0] tm420;
   reg signed [31:0] tm424;
   reg signed [31:0] tm436;
   reg signed [31:0] tm440;
   reg signed [31:0] tm452;
   reg signed [31:0] tm460;
   reg signed [31:0] tm468;
   reg signed [31:0] tm472;
   reg signed [31:0] tm484;
   reg signed [31:0] tm507;
   reg signed [31:0] tm530;
   reg signed [31:0] tm553;
   reg signed [31:0] tm576;
   reg signed [31:0] tm599;
   reg signed [31:0] tm622;
   reg signed [31:0] tm645;
   reg signed [31:0] tm485;
   reg signed [31:0] tm508;
   reg signed [31:0] tm531;
   reg signed [31:0] tm554;
   reg signed [31:0] tm577;
   reg signed [31:0] tm600;
   reg signed [31:0] tm623;
   reg signed [31:0] tm646;
   reg signed [31:0] tm486;
   reg signed [31:0] tm509;
   reg signed [31:0] tm532;
   reg signed [31:0] tm555;
   reg signed [31:0] tm578;
   reg signed [31:0] tm601;
   reg signed [31:0] tm624;
   reg signed [31:0] tm647;
   reg signed [31:0] tm487;
   reg signed [31:0] tm510;
   reg signed [31:0] tm533;
   reg signed [31:0] tm556;
   reg signed [31:0] tm579;
   reg signed [31:0] tm602;
   reg signed [31:0] tm625;
   reg signed [31:0] tm648;
   wire  [31:0] a194;
   wire  [31:0] a195;
   reg signed [31:0] tm488;
   reg signed [31:0] tm511;
   reg signed [31:0] tm534;
   reg signed [31:0] tm557;
   reg signed [31:0] tm580;
   reg signed [31:0] tm603;
   reg signed [31:0] tm626;
   reg signed [31:0] tm649;
   reg signed [31:0] tm453;
   reg signed [31:0] tm461;
   reg signed [31:0] tm489;
   reg signed [31:0] tm512;
   reg signed [31:0] tm535;
   reg signed [31:0] tm558;
   reg signed [31:0] tm581;
   reg signed [31:0] tm604;
   reg signed [31:0] tm627;
   reg signed [31:0] tm650;
   reg signed [31:0] tm454;
   reg signed [31:0] tm462;
   reg signed [31:0] tm490;
   reg signed [31:0] tm513;
   reg signed [31:0] tm536;
   reg signed [31:0] tm559;
   reg signed [31:0] tm582;
   reg signed [31:0] tm605;
   reg signed [31:0] tm628;
   reg signed [31:0] tm651;
   reg signed [31:0] tm455;
   reg signed [31:0] tm463;
   reg signed [31:0] tm491;
   reg signed [31:0] tm514;
   reg signed [31:0] tm537;
   reg signed [31:0] tm560;
   reg signed [31:0] tm583;
   reg signed [31:0] tm606;
   reg signed [31:0] tm629;
   reg signed [31:0] tm652;
   wire  [31:0] a168;
   wire  [31:0] a170;
   wire  [31:0] a171;
   wire  [31:0] a172;
   wire  [31:0] a180;
   wire  [31:0] a182;
   wire  [31:0] a183;
   wire  [31:0] a184;
   wire  [31:0] a192;
   wire  [31:0] a196;
   wire  [31:0] a204;
   wire  [31:0] a206;
   wire  [31:0] a207;
   wire  [31:0] a208;
   reg signed [31:0] tm456;
   reg signed [31:0] tm464;
   reg signed [31:0] tm492;
   reg signed [31:0] tm515;
   reg signed [31:0] tm538;
   reg signed [31:0] tm561;
   reg signed [31:0] tm584;
   reg signed [31:0] tm607;
   reg signed [31:0] tm630;
   reg signed [31:0] tm653;
   reg signed [31:0] tm493;
   reg signed [31:0] tm516;
   reg signed [31:0] tm539;
   reg signed [31:0] tm562;
   reg signed [31:0] tm585;
   reg signed [31:0] tm608;
   reg signed [31:0] tm631;
   reg signed [31:0] tm654;
   reg signed [31:0] tm494;
   reg signed [31:0] tm517;
   reg signed [31:0] tm540;
   reg signed [31:0] tm563;
   reg signed [31:0] tm586;
   reg signed [31:0] tm609;
   reg signed [31:0] tm632;
   reg signed [31:0] tm655;
   reg signed [31:0] tm495;
   reg signed [31:0] tm518;
   reg signed [31:0] tm541;
   reg signed [31:0] tm564;
   reg signed [31:0] tm587;
   reg signed [31:0] tm610;
   reg signed [31:0] tm633;
   reg signed [31:0] tm656;
   reg signed [31:0] tm496;
   reg signed [31:0] tm519;
   reg signed [31:0] tm542;
   reg signed [31:0] tm565;
   reg signed [31:0] tm588;
   reg signed [31:0] tm611;
   reg signed [31:0] tm634;
   reg signed [31:0] tm657;
   reg signed [31:0] tm497;
   reg signed [31:0] tm520;
   reg signed [31:0] tm543;
   reg signed [31:0] tm566;
   reg signed [31:0] tm589;
   reg signed [31:0] tm612;
   reg signed [31:0] tm635;
   reg signed [31:0] tm658;
   reg signed [31:0] tm498;
   reg signed [31:0] tm521;
   reg signed [31:0] tm544;
   reg signed [31:0] tm567;
   reg signed [31:0] tm590;
   reg signed [31:0] tm613;
   reg signed [31:0] tm636;
   reg signed [31:0] tm659;
   reg signed [31:0] tm499;
   reg signed [31:0] tm522;
   reg signed [31:0] tm545;
   reg signed [31:0] tm568;
   reg signed [31:0] tm591;
   reg signed [31:0] tm614;
   reg signed [31:0] tm637;
   reg signed [31:0] tm660;
   reg signed [31:0] tm500;
   reg signed [31:0] tm523;
   reg signed [31:0] tm546;
   reg signed [31:0] tm569;
   reg signed [31:0] tm592;
   reg signed [31:0] tm615;
   reg signed [31:0] tm638;
   reg signed [31:0] tm661;
   reg signed [31:0] tm501;
   reg signed [31:0] tm524;
   reg signed [31:0] tm547;
   reg signed [31:0] tm570;
   reg signed [31:0] tm593;
   reg signed [31:0] tm616;
   reg signed [31:0] tm639;
   reg signed [31:0] tm662;
   reg signed [31:0] tm502;
   reg signed [31:0] tm525;
   reg signed [31:0] tm548;
   reg signed [31:0] tm571;
   reg signed [31:0] tm594;
   reg signed [31:0] tm617;
   reg signed [31:0] tm640;
   reg signed [31:0] tm663;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire  [31:0] Y6;
   wire  [31:0] Y7;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire  [31:0] Y10;
   wire  [31:0] Y11;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire  [31:0] Y14;
   wire  [31:0] Y15;
   reg signed [31:0] tm503;
   reg signed [31:0] tm526;
   reg signed [31:0] tm549;
   reg signed [31:0] tm572;
   reg signed [31:0] tm595;
   reg signed [31:0] tm618;
   reg signed [31:0] tm641;
   reg signed [31:0] tm664;

   wire signed [31:0] tm94;
   assign tm94 = 32'hbf3504f3;

   assign a193 = tm15;
   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a174 = a217;
   assign a220 = X5;
   assign a178 = a220;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a198 = a233;
   assign a236 = X13;
   assign a202 = a236;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm6;
   assign a169 = tm7;
   assign a179 = tm10;
   assign a181 = tm11;
   assign a191 = tm14;
   assign a203 = tm18;
   assign a205 = tm19;
   assign Y0 = tm503;
   assign Y1 = tm526;
   assign Y4 = tm549;
   assign Y5 = tm572;
   assign Y8 = tm595;
   assign Y9 = tm618;
   assign Y12 = tm641;
   assign Y13 = tm664;

   D2_5377 instD2inst0_5377(.addr(i1[0:0]), .out(tm6), .clk(clk));

   D4_5385 instD4inst0_5385(.addr(i1[0:0]), .out(tm10), .clk(clk));

   D6_5393 instD6inst0_5393(.addr(i1[0:0]), .out(tm14), .clk(clk));

   D8_5401 instD8inst0_5401(.addr(i1[0:0]), .out(tm18), .clk(clk));

   D10_5409 instD10inst0_5409(.addr(i1[0:0]), .out(tm7), .clk(clk));

   D12_5417 instD12inst0_5417(.addr(i1[0:0]), .out(tm11), .clk(clk));

   D16_5433 instD16inst0_5433(.addr(i1[0:0]), .out(tm19), .clk(clk));

    multfp32fp32 m5170(.a(tm41), .b(a230), .clk(clk), .out(a194), .enable(1'b1), .rst(reset));
    multfp32fp32 m5188(.a(tm41), .b(a229), .clk(clk), .out(a195), .enable(1'b1), .rst(reset));
    multfp32fp32 m4828(.a(tm24), .b(tm420), .clk(clk), .out(a168), .enable(1'b1), .rst(reset));
    multfp32fp32 m4850(.a(tm25), .b(tm424), .clk(clk), .out(a170), .enable(1'b1), .rst(reset));
    multfp32fp32 m4868(.a(tm25), .b(tm420), .clk(clk), .out(a171), .enable(1'b1), .rst(reset));
    multfp32fp32 m4879(.a(tm24), .b(tm424), .clk(clk), .out(a172), .enable(1'b1), .rst(reset));
    multfp32fp32 m4988(.a(tm32), .b(tm436), .clk(clk), .out(a180), .enable(1'b1), .rst(reset));
    multfp32fp32 m5010(.a(tm33), .b(tm440), .clk(clk), .out(a182), .enable(1'b1), .rst(reset));
    multfp32fp32 m5028(.a(tm33), .b(tm436), .clk(clk), .out(a183), .enable(1'b1), .rst(reset));
    multfp32fp32 m5039(.a(tm32), .b(tm440), .clk(clk), .out(a184), .enable(1'b1), .rst(reset));
    multfp32fp32 m5148(.a(tm40), .b(tm452), .clk(clk), .out(a192), .enable(1'b1), .rst(reset));
    multfp32fp32 m5199(.a(tm40), .b(tm460), .clk(clk), .out(a196), .enable(1'b1), .rst(reset));
    multfp32fp32 m5308(.a(tm48), .b(tm468), .clk(clk), .out(a204), .enable(1'b1), .rst(reset));
    multfp32fp32 m5330(.a(tm49), .b(tm472), .clk(clk), .out(a206), .enable(1'b1), .rst(reset));
    multfp32fp32 m5348(.a(tm49), .b(tm468), .clk(clk), .out(a207), .enable(1'b1), .rst(reset));
    multfp32fp32 m5359(.a(tm48), .b(tm472), .clk(clk), .out(a208), .enable(1'b1), .rst(reset));
    subfp32 sub4857(.a(a168), .b(a170), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add4886(.a(a171), .b(a172), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));
    subfp32 sub5017(.a(a180), .b(a182), .clk(clk), .out(Y6), .enable(1'b1), .rst(reset));
    addfp32 add5046(.a(a183), .b(a184), .clk(clk), .out(Y7), .enable(1'b1), .rst(reset));
    subfp32 sub5177(.a(a192), .b(tm456), .clk(clk), .out(Y10), .enable(1'b1), .rst(reset));
    addfp32 add5206(.a(tm464), .b(a196), .clk(clk), .out(Y11), .enable(1'b1), .rst(reset));
    subfp32 sub5337(.a(a204), .b(a206), .clk(clk), .out(Y14), .enable(1'b1), .rst(reset));
    addfp32 add5366(.a(a207), .b(a208), .clk(clk), .out(Y15), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm41 <= 0;
         tm41 <= 0;
         tm24 <= 0;
         tm420 <= 0;
         tm25 <= 0;
         tm424 <= 0;
         tm25 <= 0;
         tm420 <= 0;
         tm24 <= 0;
         tm424 <= 0;
         tm32 <= 0;
         tm436 <= 0;
         tm33 <= 0;
         tm440 <= 0;
         tm33 <= 0;
         tm436 <= 0;
         tm32 <= 0;
         tm440 <= 0;
         tm40 <= 0;
         tm452 <= 0;
         tm40 <= 0;
         tm460 <= 0;
         tm48 <= 0;
         tm468 <= 0;
         tm49 <= 0;
         tm472 <= 0;
         tm49 <= 0;
         tm468 <= 0;
         tm48 <= 0;
         tm472 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm15 <= tm94;
         tm41 <= a193;
         tm417 <= a213;
         tm421 <= a214;
         tm433 <= a221;
         tm437 <= a222;
         tm449 <= a229;
         tm457 <= a230;
         tm465 <= a237;
         tm469 <= a238;
         tm481 <= a162;
         tm504 <= a166;
         tm527 <= a174;
         tm550 <= a178;
         tm573 <= a186;
         tm596 <= a190;
         tm619 <= a198;
         tm642 <= a202;
         tm418 <= tm417;
         tm422 <= tm421;
         tm434 <= tm433;
         tm438 <= tm437;
         tm450 <= tm449;
         tm458 <= tm457;
         tm466 <= tm465;
         tm470 <= tm469;
         tm482 <= tm481;
         tm505 <= tm504;
         tm528 <= tm527;
         tm551 <= tm550;
         tm574 <= tm573;
         tm597 <= tm596;
         tm620 <= tm619;
         tm643 <= tm642;
         tm419 <= tm418;
         tm423 <= tm422;
         tm435 <= tm434;
         tm439 <= tm438;
         tm451 <= tm450;
         tm459 <= tm458;
         tm467 <= tm466;
         tm471 <= tm470;
         tm483 <= tm482;
         tm506 <= tm505;
         tm529 <= tm528;
         tm552 <= tm551;
         tm575 <= tm574;
         tm598 <= tm597;
         tm621 <= tm620;
         tm644 <= tm643;
         tm24 <= a167;
         tm25 <= a169;
         tm32 <= a179;
         tm33 <= a181;
         tm40 <= a191;
         tm48 <= a203;
         tm49 <= a205;
         tm420 <= tm419;
         tm424 <= tm423;
         tm436 <= tm435;
         tm440 <= tm439;
         tm452 <= tm451;
         tm460 <= tm459;
         tm468 <= tm467;
         tm472 <= tm471;
         tm484 <= tm483;
         tm507 <= tm506;
         tm530 <= tm529;
         tm553 <= tm552;
         tm576 <= tm575;
         tm599 <= tm598;
         tm622 <= tm621;
         tm645 <= tm644;
         tm485 <= tm484;
         tm508 <= tm507;
         tm531 <= tm530;
         tm554 <= tm553;
         tm577 <= tm576;
         tm600 <= tm599;
         tm623 <= tm622;
         tm646 <= tm645;
         tm486 <= tm485;
         tm509 <= tm508;
         tm532 <= tm531;
         tm555 <= tm554;
         tm578 <= tm577;
         tm601 <= tm600;
         tm624 <= tm623;
         tm647 <= tm646;
         tm487 <= tm486;
         tm510 <= tm509;
         tm533 <= tm532;
         tm556 <= tm555;
         tm579 <= tm578;
         tm602 <= tm601;
         tm625 <= tm624;
         tm648 <= tm647;
         tm488 <= tm487;
         tm511 <= tm510;
         tm534 <= tm533;
         tm557 <= tm556;
         tm580 <= tm579;
         tm603 <= tm602;
         tm626 <= tm625;
         tm649 <= tm648;
         tm453 <= a194;
         tm461 <= a195;
         tm489 <= tm488;
         tm512 <= tm511;
         tm535 <= tm534;
         tm558 <= tm557;
         tm581 <= tm580;
         tm604 <= tm603;
         tm627 <= tm626;
         tm650 <= tm649;
         tm454 <= tm453;
         tm462 <= tm461;
         tm490 <= tm489;
         tm513 <= tm512;
         tm536 <= tm535;
         tm559 <= tm558;
         tm582 <= tm581;
         tm605 <= tm604;
         tm628 <= tm627;
         tm651 <= tm650;
         tm455 <= tm454;
         tm463 <= tm462;
         tm491 <= tm490;
         tm514 <= tm513;
         tm537 <= tm536;
         tm560 <= tm559;
         tm583 <= tm582;
         tm606 <= tm605;
         tm629 <= tm628;
         tm652 <= tm651;
         tm456 <= tm455;
         tm464 <= tm463;
         tm492 <= tm491;
         tm515 <= tm514;
         tm538 <= tm537;
         tm561 <= tm560;
         tm584 <= tm583;
         tm607 <= tm606;
         tm630 <= tm629;
         tm653 <= tm652;
         tm493 <= tm492;
         tm516 <= tm515;
         tm539 <= tm538;
         tm562 <= tm561;
         tm585 <= tm584;
         tm608 <= tm607;
         tm631 <= tm630;
         tm654 <= tm653;
         tm494 <= tm493;
         tm517 <= tm516;
         tm540 <= tm539;
         tm563 <= tm562;
         tm586 <= tm585;
         tm609 <= tm608;
         tm632 <= tm631;
         tm655 <= tm654;
         tm495 <= tm494;
         tm518 <= tm517;
         tm541 <= tm540;
         tm564 <= tm563;
         tm587 <= tm586;
         tm610 <= tm609;
         tm633 <= tm632;
         tm656 <= tm655;
         tm496 <= tm495;
         tm519 <= tm518;
         tm542 <= tm541;
         tm565 <= tm564;
         tm588 <= tm587;
         tm611 <= tm610;
         tm634 <= tm633;
         tm657 <= tm656;
         tm497 <= tm496;
         tm520 <= tm519;
         tm543 <= tm542;
         tm566 <= tm565;
         tm589 <= tm588;
         tm612 <= tm611;
         tm635 <= tm634;
         tm658 <= tm657;
         tm498 <= tm497;
         tm521 <= tm520;
         tm544 <= tm543;
         tm567 <= tm566;
         tm590 <= tm589;
         tm613 <= tm612;
         tm636 <= tm635;
         tm659 <= tm658;
         tm499 <= tm498;
         tm522 <= tm521;
         tm545 <= tm544;
         tm568 <= tm567;
         tm591 <= tm590;
         tm614 <= tm613;
         tm637 <= tm636;
         tm660 <= tm659;
         tm500 <= tm499;
         tm523 <= tm522;
         tm546 <= tm545;
         tm569 <= tm568;
         tm592 <= tm591;
         tm615 <= tm614;
         tm638 <= tm637;
         tm661 <= tm660;
         tm501 <= tm500;
         tm524 <= tm523;
         tm547 <= tm546;
         tm570 <= tm569;
         tm593 <= tm592;
         tm616 <= tm615;
         tm639 <= tm638;
         tm662 <= tm661;
         tm502 <= tm501;
         tm525 <= tm524;
         tm548 <= tm547;
         tm571 <= tm570;
         tm594 <= tm593;
         tm617 <= tm616;
         tm640 <= tm639;
         tm663 <= tm662;
         tm503 <= tm502;
         tm526 <= tm525;
         tm549 <= tm548;
         tm572 <= tm571;
         tm595 <= tm594;
         tm618 <= tm617;
         tm641 <= tm640;
         tm664 <= tm663;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock5438(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(11, 1) shiftFIFO_8182(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a33;
   wire signed [31:0] a34;
   wire signed [31:0] a35;
   wire signed [31:0] a36;
   wire signed [31:0] a41;
   wire signed [31:0] a42;
   wire signed [31:0] a43;
   wire signed [31:0] a44;
   wire signed [31:0] a49;
   wire signed [31:0] a50;
   wire signed [31:0] a51;
   wire signed [31:0] a52;
   wire signed [31:0] a57;
   wire signed [31:0] a58;
   wire signed [31:0] a59;
   wire signed [31:0] a60;
   wire  [31:0] t89;
   wire  [31:0] t90;
   wire  [31:0] t91;
   wire  [31:0] t92;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire  [31:0] t93;
   wire  [31:0] t94;
   wire  [31:0] t95;
   wire  [31:0] t96;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire  [31:0] t97;
   wire  [31:0] t98;
   wire  [31:0] t99;
   wire  [31:0] t100;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t101;
   wire  [31:0] t102;
   wire  [31:0] t103;
   wire  [31:0] t104;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;


   assign a33 = X0;
   assign a34 = X2;
   assign a35 = X1;
   assign a36 = X3;
   assign a41 = X4;
   assign a42 = X6;
   assign a43 = X5;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X10;
   assign a51 = X9;
   assign a52 = X11;
   assign a57 = X12;
   assign a58 = X14;
   assign a59 = X13;
   assign a60 = X15;
   assign Y0 = t89;
   assign Y1 = t90;
   assign Y2 = t91;
   assign Y3 = t92;
   assign Y4 = t93;
   assign Y5 = t94;
   assign Y6 = t95;
   assign Y7 = t96;
   assign Y8 = t97;
   assign Y9 = t98;
   assign Y10 = t99;
   assign Y11 = t100;
   assign Y12 = t101;
   assign Y13 = t102;
   assign Y14 = t103;
   assign Y15 = t104;

    addfp32 add5450(.a(a33), .b(a34), .clk(clk), .out(t89), .enable(1'b1), .rst(reset));
    addfp32 add5465(.a(a35), .b(a36), .clk(clk), .out(t90), .enable(1'b1), .rst(reset));
    subfp32 sub5480(.a(a33), .b(a34), .clk(clk), .out(t91), .enable(1'b1), .rst(reset));
    subfp32 sub5495(.a(a35), .b(a36), .clk(clk), .out(t92), .enable(1'b1), .rst(reset));
    addfp32 add5526(.a(a41), .b(a42), .clk(clk), .out(t93), .enable(1'b1), .rst(reset));
    addfp32 add5541(.a(a43), .b(a44), .clk(clk), .out(t94), .enable(1'b1), .rst(reset));
    subfp32 sub5556(.a(a41), .b(a42), .clk(clk), .out(t95), .enable(1'b1), .rst(reset));
    subfp32 sub5571(.a(a43), .b(a44), .clk(clk), .out(t96), .enable(1'b1), .rst(reset));
    addfp32 add5602(.a(a49), .b(a50), .clk(clk), .out(t97), .enable(1'b1), .rst(reset));
    addfp32 add5617(.a(a51), .b(a52), .clk(clk), .out(t98), .enable(1'b1), .rst(reset));
    subfp32 sub5632(.a(a49), .b(a50), .clk(clk), .out(t99), .enable(1'b1), .rst(reset));
    subfp32 sub5647(.a(a51), .b(a52), .clk(clk), .out(t100), .enable(1'b1), .rst(reset));
    addfp32 add5678(.a(a57), .b(a58), .clk(clk), .out(t101), .enable(1'b1), .rst(reset));
    addfp32 add5693(.a(a59), .b(a60), .clk(clk), .out(t102), .enable(1'b1), .rst(reset));
    subfp32 sub5708(.a(a57), .b(a58), .clk(clk), .out(t103), .enable(1'b1), .rst(reset));
    subfp32 sub5723(.a(a59), .b(a60), .clk(clk), .out(t104), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc5747(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   wire [63:0] t2;
   wire [63:0] s2;
   assign t2 = {X4, X5};
   wire [63:0] t3;
   wire [63:0] s3;
   assign t3 = {X6, X7};
   wire [63:0] t4;
   wire [63:0] s4;
   assign t4 = {X8, X9};
   wire [63:0] t5;
   wire [63:0] s5;
   assign t5 = {X10, X11};
   wire [63:0] t6;
   wire [63:0] s6;
   assign t6 = {X12, X13};
   wire [63:0] t7;
   wire [63:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];
   assign Y4 = s2[63:32];
   assign Y5 = s2[31:0];
   assign Y6 = s3[63:32];
   assign Y7 = s3[31:0];
   assign Y8 = s4[63:32];
   assign Y9 = s4[31:0];
   assign Y10 = s5[63:32];
   assign Y11 = s5[31:0];
   assign Y12 = s6[63:32];
   assign Y13 = s6[31:0];
   assign Y14 = s7[63:32];
   assign Y15 = s7[31:0];

   perm5745 instPerm8183(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm5745(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1];
   assign inBank0[1] = addr0[2];
   assign inBank0[2] = addr0[3] ^ addr0[0];
   assign inAddr0[0] = addr0[0];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[1];
   assign outBank0[2] = addr0b[3] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[1];
   assign outBank_a0[2] = addr0c[3] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];

   assign inBank1[0] = addr1[1];
   assign inBank1[1] = addr1[2];
   assign inBank1[2] = addr1[3] ^ addr1[0];
   assign inAddr1[0] = addr1[0];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[1];
   assign outBank1[2] = addr1b[3] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[1];
   assign outBank_a1[2] = addr1c[3] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];

   assign inBank2[0] = addr2[1];
   assign inBank2[1] = addr2[2];
   assign inBank2[2] = addr2[3] ^ addr2[0];
   assign inAddr2[0] = addr2[0];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[1];
   assign outBank2[2] = addr2b[3] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[1];
   assign outBank_a2[2] = addr2c[3] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];

   assign inBank3[0] = addr3[1];
   assign inBank3[1] = addr3[2];
   assign inBank3[2] = addr3[3] ^ addr3[0];
   assign inAddr3[0] = addr3[0];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[1];
   assign outBank3[2] = addr3b[3] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[1];
   assign outBank_a3[2] = addr3c[3] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];

   assign inBank4[0] = addr4[1];
   assign inBank4[1] = addr4[2];
   assign inBank4[2] = addr4[3] ^ addr4[0];
   assign inAddr4[0] = addr4[0];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[1];
   assign outBank4[2] = addr4b[3] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[1];
   assign outBank_a4[2] = addr4c[3] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];

   assign inBank5[0] = addr5[1];
   assign inBank5[1] = addr5[2];
   assign inBank5[2] = addr5[3] ^ addr5[0];
   assign inAddr5[0] = addr5[0];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[1];
   assign outBank5[2] = addr5b[3] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[1];
   assign outBank_a5[2] = addr5c[3] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];

   assign inBank6[0] = addr6[1];
   assign inBank6[1] = addr6[2];
   assign inBank6[2] = addr6[3] ^ addr6[0];
   assign inAddr6[0] = addr6[0];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[1];
   assign outBank6[2] = addr6b[3] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[1];
   assign outBank_a6[2] = addr6c[3] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];

   assign inBank7[0] = addr7[1];
   assign inBank7[1] = addr7[2];
   assign inBank7[2] = addr7[3] ^ addr7[0];
   assign inAddr7[0] = addr7[0];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[1];
   assign outBank7[2] = addr7b[3] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[1];
   assign outBank_a7[2] = addr7c[3] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];

   shiftRegFIFO #(2, 1) shiftFIFO_8186(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_8189(.X(next0), .Y(next_out), .clk(clk));


   memArray16_5745 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .x4(w_1_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_1_4[logDepth-1:0]),
        .outAddr4(u_1_4), 
        .x5(w_1_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_1_5[logDepth-1:0]),
        .outAddr5(u_1_5), 
        .x6(w_1_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_1_6[logDepth-1:0]),
        .outAddr6(u_1_6), 
        .x7(w_1_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_1_7[logDepth-1:0]),
        .outAddr7(u_1_7), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_4 = {x1, inAddr1};
    assign w_0_1 = {x2, inAddr2};
    assign w_0_5 = {x3, inAddr3};
    assign w_0_2 = {x4, inAddr4};
    assign w_0_6 = {x5, inAddr5};
    assign w_0_3 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign y4 = z_1_4;
    assign y5 = z_1_5;
    assign y6 = z_1_6;
    assign y7 = z_1_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_5745(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(2, 1) shiftFIFO_8192(.X(next), .Y(next0), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule


module multfp32fp32(clk, enable, rst, a, b, out);
   input [31:0] a, b;
   output [31:0] out;
   input 	clk, enable, rst;

   wire signA, signB; 
   wire [7:0] expA, expB;
   wire [23:0] sigA, sigB;

   assign signA=b[31];
   assign expA=b[30:23];
   assign sigA={1'b1,b[22:0]};

   assign signB=a[31];
   assign expB=a[30:23];
   assign sigB={1'b1,a[22:0]};
   
   reg 	  signP_m0;
   reg [8:0] expP_m0;

   wire [47:0] mult_res0;
   
   
   multfxp24fxp24 mult(clk, enable, rst, sigA, sigB, mult_res0);

   reg 	       isNaN_a0, isNaN_b0, isZero_a0, isZero_b0, isInf_a0, isInf_b0;   

   wire        sigAZero, sigBZero;
   
   assign      sigAZero = (sigA[22:0] == 0);
   assign      sigBZero = (sigB[22:0] == 0);
      
   // stage 1 mult stage 1
   always@(posedge clk) if (enable) begin
      isNaN_a0 <= (expA == 8'hff) && !sigAZero;
      isNaN_b0 <= (expB == 8'hff) && !sigBZero;

      isZero_a0 <= (expA == 8'h00);
      isZero_b0 <= (expB == 8'h00);

      isInf_a0 <= (expA == 8'hff) && sigAZero;
      isInf_b0 <= (expB == 8'hff) && sigBZero;
      
      signP_m0<=signA!=signB;
      expP_m0<=expA + expB;
   end 

   reg signP_m1, zero_m1, inf_m1, nan_m1, under_m1;
   reg [8:0] expP_m1;

   // stage 2 mult stage 2
   always@(posedge clk) if (enable) begin
      zero_m1 <= isZero_a0 || isZero_b0;
      inf_m1 <= isInf_a0 || isInf_b0;
      nan_m1 <= isNaN_a0 || isNaN_b0;
      under_m1 <= (expP_m0 < 128);      
      
      signP_m1<=signP_m0;      
      expP_m1<=expP_m0 - 127;      
   end 

   reg signP_m2, zero_m2, inf_m2, nan_m2; 
   reg [8:0] expP_m2;

   // stage 3 mult stage 3
   always@(posedge clk) if (enable) begin
      zero_m2 <= zero_m1 || under_m1;
      inf_m2 <= (inf_m1 || (expP_m1[8] && ~under_m1));
      nan_m2 <= nan_m1 || (zero_m1 && inf_m1); // 0 * infty = NaN
            
      signP_m2<=signP_m1;      
      expP_m2<=expP_m1;
   end 

   reg signP_m3, zero_m3, inf_m3, nan_m3; 
   reg [8:0] expP_m3;

   // stage 4 mult stage 4
   always@(posedge clk) if (enable) begin
      zero_m3 <= zero_m2;
      inf_m3 <= (inf_m2 || (expP_m2 == 9'h0ff));
      nan_m3 <= nan_m2;
      
      signP_m3<=signP_m2;
      expP_m3<=expP_m2;
   end 

   reg signP_m4, zero_m4, inf_m4, nan_m4; 
   reg [8:0] expP_m4;

   // stage 5 mult stage 5
   always@(posedge clk) if (enable) begin
      zero_m4 <= zero_m3;
      inf_m4 <= inf_m3;
      nan_m4 <= nan_m3;
      
      signP_m4<=signP_m3;      
      expP_m4<=expP_m3;      
   end 

   reg signP_m5, zero_m5, inf_m5, nan_m5;
   reg [8:0] expP_m5;

   
   // stage 6 mult stage 6
   always@(posedge clk) if (enable) begin
      zero_m5 <= zero_m4;
      inf_m5 <= inf_m4;
      nan_m5 <= nan_m4;
      
      signP_m5<=signP_m4;      
      expP_m5 <= expP_m4;
      
   end

   reg signP_m6, zero_m6, inf_m6, nan_m6;   
   reg [8:0] expP_m6;
   reg [23:0] sig_m6;

   // stage 7 --  mult output here!
   // normalize product
   always@(posedge clk) if (enable) begin

      zero_m6 <= (zero_m5 || (mult_res0[47:23] == 0));
      nan_m6 <= nan_m5;      
      
      signP_m6<=signP_m5;      

      if (mult_res0[47] == 1'b1) begin
	 expP_m6<=expP_m5+1;
	 sig_m6 <= mult_res0[47:24];
	 inf_m6 <= (inf_m5 || (expP_m5 == 9'h0ff));	 
      end
      else begin
	 expP_m6 <= expP_m5;
	 sig_m6 <= mult_res0[46:23];
	 inf_m6 <= inf_m5;	 
      end	 
   end

   reg signP_m7;
   reg [7:0] expP_m7;
   reg [22:0] sig_m7;
   
   // stage 8: cleanup
   always@(posedge clk) if (enable) begin
      signP_m7 <= signP_m6;

      if (inf_m6 || nan_m6)
	expP_m7 <= 8'hff;
      else if (zero_m6)
	expP_m7 <= 8'h00;
      else
	expP_m7 <= expP_m6;

      if (nan_m6)
	sig_m7 <= 1;
      else if (zero_m6 || inf_m6)
	sig_m7 <= 0;
      else
	sig_m7 <= sig_m6[22:0];      
   end

   assign out = {signP_m7, expP_m7, sig_m7};   
   
endmodule


module multfxp24fxp24(clk, enable, rst, a, b, out);
        parameter WIDTH=24, CYCLES=6;
        input  [WIDTH-1:0]   a,b;
        output [2*WIDTH-1:0] out;
        input                clk, rst,enable;
        reg [2*WIDTH-1:0]    q[CYCLES-1:0];
        integer              i;

        assign               out = q[CYCLES-1];   

        always @(posedge clk) begin
                q[0] <= a * b;
                for (i = 1; i < CYCLES; i=i+1) begin
                        q[i] <= q[i-1];
                end
        end
endmodule 


module subfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   addfp32 xyz(.clk(clk), .enable(enable), .rst(rst),  .a(a), .b(b^32'h80000000), .out(out));
endmodule

module addfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   wire [7:0] expA;
   wire [23:0] sigA;

   assign expA=a[30:23];
   assign sigA={1'b1,a[22:0]};
	
   wire [7:0] expB;
   wire [23:0] sigB;

   assign expB=b[30:23];
   assign sigB={1'b1,b[22:0]};

   reg [31:0] Big, Small;
   reg [7:0] expDiff;

   // stage 1 swap A, B
   always@(posedge clk) if (enable) begin
     if (expA>expB) begin
	// A has larger exp
        Big<=a;
	     Small<=b;
        expDiff<=expA-expB;
     end else if (expA==expB) begin
        if (sigA>=sigB) begin
	  // A has larger sig
          Big<=a;
	       Small<=b;
          expDiff<=expA-expB;
        end else begin
          Small<=a;
	       Big<=b;
          expDiff<=expB-expA;
        end
     end else begin
        Small<=a;
        Big<=b;
        expDiff<=expB-expA;
     end
  end

  wire signBig; 
  wire [7:0] expBig;
  wire [23:0] sigBig;

  assign signBig=Big[31];
  assign expBig=Big[30:23];
  assign sigBig=(expBig!=0)?{1'b1,Big[22:0]}:0;

  wire signSmall; 
  wire [7:0] expSmall;
  wire [23:0] sigSmall;

  assign signSmall=Small[31];
  assign expSmall=Small[30:23];
  assign sigSmall=(expDiff[7:5]||(expSmall==0))?0:(expDiff[4]?{16'h0000,1'b1,Small[22:16]}:{1'b1,Small[22:0]});

  reg signSum_a0; 
  reg [7:0] expSum_a0;
  reg [23:0] sigBig_a0;
  reg [23:0] sigSmall_a0;
  reg [3:0] expDiff_a0;
  reg add_a0;

  // stage 2 align addend coarse part 1 
  always@(posedge clk) if (enable) begin
    signSum_a0<=signBig;
    expSum_a0<=expBig;
    sigBig_a0<=sigBig;
    sigSmall_a0<=sigSmall;
    expDiff_a0<=expDiff[3:0];
    add_a0<=signSmall==signBig;
  end

  reg signSum_a1; 
  reg [7:0] expSum_a1;
  reg [23:0] sigBig_a1;
  reg [23:0] sigSmall_a1;
  reg [1:0] expDiff_a1;
  reg add_a1;

  // stage 3  align addend fine part 2
  always@(posedge clk) if (enable) begin
    signSum_a1<=signSum_a0;
    expSum_a1<=expSum_a0;
    sigBig_a1<=sigBig_a0;
    expDiff_a1<=expDiff_a0;
    add_a1<=add_a0;

    if (expDiff_a0[3:2]==2'b11) begin
      sigSmall_a1<={12'h000,sigSmall_a0[23:12]};
    end else if (expDiff_a0[3:2]==2'b10) begin
      sigSmall_a1<={8'h00,sigSmall_a0[23:8]};
    end else if (expDiff_a0[3:2]==2'b01) begin
      sigSmall_a1<={4'h0,sigSmall_a0[23:4]};
    end else begin 
      sigSmall_a1<=sigSmall_a0;
    end
  end


  reg signSum_a2; 
  reg [7:0] expSum_a2;
  reg [23:0] sigBig_a2;
  reg [23:0] sigSmall_a2;
  reg add_a2;

  // stage 4  align addend finest part 3
  always@(posedge clk) if (enable) begin
    signSum_a2<=signSum_a1;
    expSum_a2<=expSum_a1;
    sigBig_a2<=sigBig_a1;
    add_a2<=add_a1;

    if (expDiff_a1[1:0]==2'b11) begin
      sigSmall_a2<={3'h0,sigSmall_a1[23:3]};
    end else if (expDiff_a1[1:0]==2'b10) begin
      sigSmall_a2<={2'h0,sigSmall_a1[23:2]};
    end else if (expDiff_a1[1:0]==2'b01) begin
      sigSmall_a2<={1'h0,sigSmall_a1[23:1]};
    end else begin 
      sigSmall_a2<=sigSmall_a1;
    end
  end

  reg signSum_s0; 
  reg [8:0] expSum_s0;
  reg [24:0] sigSum_s0;
  reg of_s0;

  // stage 5  do addition/substraction
  always@(posedge clk) if (enable) begin
    signSum_s0<=signSum_a2;
    expSum_s0<={1'b0,expSum_a2};
    of_s0<=(expSum_a2==8'hff)?1:0;

    if (add_a2) begin 
      sigSum_s0<={1'b0,sigBig_a2}+{1'b0,sigSmall_a2};
    end else begin
      sigSum_s0<={1'b0,sigBig_a2}-{1'b0,sigSmall_a2};
    end
  end


  reg signSum_n0; 
  reg [8:0] expSum_n0;
  reg [23:0] sigSum_n0;
  reg of_n0;
  
  // stage 6  renormalize after add
  always@(posedge clk) if (enable) begin
    signSum_n0<=signSum_s0;
    if (sigSum_s0[24] && (!of_s0)) begin
      expSum_n0<=expSum_s0+1;
      sigSum_n0<=sigSum_s0[24:1];
      of_n0<=(expSum_s0==9'h0fe);
    end else begin
      expSum_n0<=expSum_s0;
      sigSum_n0<=sigSum_s0[23:0];
      of_n0<=of_s0;
    end
  end 

  reg signSum_n1; 
  reg [8:0] expSum_n1;
  reg [23:0] sigSum_n1;
  reg of_n1;

  // stage 7  renormalized after subtract coarse
  always@(posedge clk) if (enable) begin
    signSum_n1<=signSum_n0;
    of_n1<=of_n0;    

    if (sigSum_n0[23:16]==8'h00) begin
      expSum_n1<=expSum_n0-8;
      sigSum_n1<={sigSum_n0[16:0],8'h00};
    end else begin
      expSum_n1<=expSum_n0;
      sigSum_n1<=sigSum_n0;
    end
  end 

  reg signSum_n2; 
  reg [8:0] expSum_n2;
  reg [23:0] sigSum_n2;
  reg of_n2;

  // stage 8  
  always@(posedge clk) if (enable) begin
    signSum_n2<=signSum_n1;
    of_n2<=of_n1;

    if (sigSum_n1[23:16]==8'h00) begin
      expSum_n2<=expSum_n1-8;
      sigSum_n2<={sigSum_n1[16:0],8'h00};
    end else begin
      expSum_n2<=expSum_n1;
      sigSum_n2<=sigSum_n1;
    end
  end 

  reg signSum_n3; 
  reg [8:0] expSum_n3;
  reg [23:0] sigSum_n3;
  reg of_n3;

  // stage 9  
  always@(posedge clk) if (enable) begin
    signSum_n3<=signSum_n2;
    of_n3<=of_n2;

    if (sigSum_n2[23:20]==4'h0) begin
      expSum_n3<=expSum_n2-4;
      sigSum_n3<={sigSum_n2[20:0],4'h0};
    end else begin
      expSum_n3<=expSum_n2;
      sigSum_n3<=sigSum_n2;
    end
  end 


  reg signSum_n4; 
  reg [8:0] expSum_n4;
  reg [23:0] sigSum_n4;
  reg of_n4;

  // stage 10  
  always@(posedge clk) if (enable) begin
    signSum_n4<=signSum_n3;
    of_n4<=of_n3;

    if (sigSum_n3[23:20]==4'h0) begin
      expSum_n4<=expSum_n3-4;
      sigSum_n4<={sigSum_n3[20:0],4'h0};
    end else if (sigSum_n3[23:21]==3'b000) begin
      expSum_n4<=expSum_n3-3;
      sigSum_n4<={sigSum_n3[21:0],3'h0};
    end else if (sigSum_n3[23:22]==2'b00) begin
      expSum_n4<=expSum_n3-2;
      sigSum_n4<={sigSum_n3[22:0],2'h0};
    end else if (sigSum_n3[23]==1'b0) begin
      expSum_n4<=expSum_n3-1;
      sigSum_n4<={sigSum_n3[22:0],1'h0};
    end else begin
      expSum_n4<=expSum_n3;
      sigSum_n4<=sigSum_n3;
    end
  end 

  reg signSum_f0; 
  reg [7:0] expSum_f0;
  reg [23:0] sigSum_f0;

  // stage 11 clean-up
  always@(posedge clk) if (enable) begin
    signSum_f0<=signSum_n4;

    if (of_n4) begin 
      expSum_f0<=8'hff;
      sigSum_f0<=0;
    end else if (expSum_n4[8]||(expSum_n4==0)||(sigSum_n4==0)) begin
      expSum_f0<=8'h00;
      sigSum_f0<=0;
    end else begin
      expSum_f0<=expSum_n4[7:0];
      sigSum_f0<=sigSum_n4;
    end
  end  

  assign out={signSum_f0, expSum_f0, sigSum_f0[22:0]};

endmodule
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
